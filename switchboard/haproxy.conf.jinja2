global
    log 127.0.0.1 local0
    log 127.0.0.1 local1 notice
    chroot /var/lib/haproxy
    stats socket /var/run/haproxy-admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    option  forwardfor
    option  http-server-close
    timeout connect 5000
    timeout client  120000
    timeout server  120000
    timeout tunnel 1h

# autogenerated part

{#- Processing tcp frontend if any -#}
{%- for group, list in services | groupby('name') -%}
{%- for service in list[:1] -%}
{% if service.tcp %}
frontend tcp-{{service.tcp}}-in:
    mode tcp
    bind :{{service.tcp}}
    default_backend bk_tcp_{{service.name}}
{% endif %}
{%- endfor -%}
{%- endfor -%}

{#- Processing tcp backend if any -#}
{%- for group, list in services | groupby('name') -%}
{%- for service in list[:1] -%}
{% if service.tcp %}
backend bk_tcp-{{service.name}}
{%- for service in services[:1] %}
    mode tcp
    {%- if service.check %}
    option {{service.check}}
    {%- endif %}
    balance {% if service.balance%}{{service.balance}}{% else %}roundrobin{% endif %}
{%- endfor -%}
    {%- for service in list %}
    server "{{service.id}}" {{service.ip}}:{{service.port}}{% if service.check%} check{% endif %}
    {%- endfor %}
{% endif %}
{%- endfor -%}
{%- endfor -%}

{#- Processing http frontend -#}
{%-  if ",".join(services | get_uniq_for_key('http')) %}
frontend http-in
    bind :{{ ",:".join(services | get_uniq_for_key('http')) }} name http
    mode http
    reqadd X-Forwarded-Proto:\ http
    {#- Process url matching first -#}
    {%- for group, list in services | groupby('name') -%}
        {%- for service in list[:1] -%}
            {%- if service.http and service.dns and service.vhost and service.url%}
                {%- if service.dns is list %}
                    {%- for domain in service.dns %}
    use_backend bk_{{service.name}} if { hdr(host) -i {{service.vhost}}.{{domain}} } { path_beg -i {{service.url}} }{% endfor %}
                {%- else %}
    use_backend bk_{{service.name}} if { hdr(host) -i {{service.vhost}}.{{service.dns}} } { path_beg -i {{service.url}} }{% endif %}{% endif %}
        {%- endfor -%}
    {%- endfor %}
    {#- Process Host matching -#}
    {%- for group, list in services | groupby('name') -%}
        {%- for service in list[:1] -%}
            {%- if service.http and service.dns and service.vhost and not service.url%}
                {%- if service.dns is list %}
                    {%- for domain in service.dns %}
    use_backend bk_{{service.name}} if { hdr(host) -i {{service.vhost}}.{{domain}} }{% endfor %}
                {%- else %}
    use_backend bk_{{service.name}} if { hdr(host) -i {{service.vhost}}.{{service.dns}} }{% endif %}{% endif %}
        {%- endfor -%}
    {%- endfor %}
    {%- if ",".join(services | get_uniq_for_key('https')) -%}
    default_backend https-redirect
    {%- endif %}
{% elif ",".join(services | get_uniq_for_key('https')) %}
frontend http-in
    bind :80
    mode http
    default_backend https-redirect
{% endif %}

{#- Processing http/s backend -#}
{%- for group, list in services | groupby('name') %}
{%- for service in list[:1] %}
{%- if not service.tcp %}
backend bk_{{group}}
{%- if service.ssl == "pass-through" %}
    mode tcp
{%-else%}
    mode http
    balance {% if service.balance%}{{service.balance}}{% else %}roundrobin{% endif %}
    {%- if service.check != "disabled" %}
    {% if service.check%}option httpchk {{service.check}}{% else %}option httpchk HEAD / HTTP/1.1\r\nHost:localhost{% endif %}
    {%- endif %}
{%- endif %}
{%- for service in list %}
    server "{{service.id}}" {{service.ip}}:{{service.port}}{%if service.check != "disabled" %} check{% endif %}{% if service.ssl in ['backend', 'bridge'] %} ssl verify none{% endif %}
{%- endfor %}
{% endif %}
{%- endfor %}
{%- endfor-%}

{#- Processing https frontend -#}
{% if ",".join(services | get_uniq_for_key('https')) %}
backend https-redirect
    mode http
    redirect scheme https code 301 if !{ ssl_fc }

frontend https-in
    bind :{{ ",:".join(services | get_uniq_for_key('https')) }}
    mode tcp
    tcp-request content accept if { req_ssl_hello_type 1 }
{%- for service in services | selectattr('ssl', 'equalto', 'pass-through')%}
    {%- if service.dns is list %}
        {%- for domain in service.dns %}
    use_backend bk_{{service.name}} if { req.ssl_sni -i {{service.vhost}}.{{domain}} }{% endfor %}
                {%- else %}
    use_backend bk_{{service.name}} if { req.ssl_sni -i {{service.vhost}}.{{service.dns}} }{% endif %}
{%- endfor %}
    default_backend https-no-sni
{% endif %}

{#- Static https-no-sni -#}
{%  if ",".join(services | get_uniq_for_key('ssl', values=['bridge', 'offloading'])) %}
backend https-no-sni
    mode tcp
    server "https-no-sni-loop" localhost:10443
{% endif %}

{#- Processing https-in-no-sni -#}
{%  if ",".join(services | get_uniq_for_key('ssl', values=['bridge', 'offloading'])) %}
frontend https-in-no-sni
    mode http
    bind localhost:10443 ssl crt /etc/haproxy/certs/
    reqadd X-Forwarded-Proto:\ https
    {#- Process url matching first -#}
    {%- for group, list in services | groupby('name') -%}
        {%- for service in list[:1] -%}
            {%- if service.https and service.dns and service.vhost and service.url%}
                {%- if service.dns is list %}
                    {%- for domain in service.dns %}
    use_backend bk_{{service.name}} if { hdr(host) -i {{service.vhost}}.{{domain}} } { path_beg -i {{service.url}} }{% endfor %}
                {%- else %}
    use_backend bk_{{service.name}} if { hdr(host) -i {{service.vhost}}.{{service.dns}} } { path_beg -i {{service.url}} }{% endif %}{% endif %}
        {%- endfor -%}
    {%- endfor %}
    {#- Process Host matching -#}
    {%- for group, list in services | groupby('name') -%}
        {%- for service in list[:1] -%}
            {%- if service.ssl in ['offloading', 'bridge'] and service.dns and service.vhost and not service.url%}
                {%- if service.dns is list %}
                    {%- for domain in service.dns %}
    use_backend bk_{{service.name}} if { hdr(host) -i {{service.vhost}}.{{domain}} }{% endfor %}
                {%- else %}
    use_backend bk_{{service.name}} if { hdr(host) -i {{service.vhost}}.{{service.dns}} }{% endif %}{% endif %}
        {%- endfor -%}
    {%- endfor %}
{% endif %}
# stats part
listen stats
    bind *:5080
    mode http
    stats enable
    stats hide-version
    stats realm Haproxy\ Statistics
    stats uri /stats
    stats auth stats:stats

